module AbsOstaczGr where

-- Haskell module generated by the BNF converter
newtype Ident =
  Ident String
  deriving (Eq, Ord, Show, Read)

newtype BVAL =
  BVAL String
  deriving (Eq, Ord, Show, Read)

newtype Program =
  Prog [Decl]
  deriving (Eq, Ord, Show, Read)

data Decl
  = FnDef Type
          Ident
          [Arg]
          Block
  | VarDecl Type
            [Item]
  deriving (Eq, Ord, Show, Read)

data Arg
  = ArgByVal Type
             Ident
  | ArgByVar Type
             Ident
  deriving (Eq, Ord, Show, Read)

newtype Block =
  BlockStmt [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
  = Empty
  | BStmt Block
  | DeclStmt Decl
  | Ass Ident
        Expr
  | Incr Ident
  | Decr Ident
  | Ret Expr
  | VRet
  | Cond Expr
         Stmt
  | CondElse Expr
             Stmt
             Stmt
  | Subsection Ident
               Block
  | SubsectionPaid Ident
                   Expr
                   Block
  | Repeat
  | Finish
  | Earn Expr
  | RepeatXTimes Expr
  | SExp Expr
  | Show Expr
  deriving (Eq, Ord, Show, Read)

data Item =
  Init Ident
       Expr
  deriving (Eq, Ord, Show, Read)

data Type
  = TInt
  | TStr
  | TBool
  | TVoid
  deriving (Eq, Ord, Show, Read)

data Expr
  = EVar Ident
  | ELitInt Integer
  | ELitBool BVAL
  | EApp Ident
         [Expr]
  | EString String
  | Neg Expr
  | Not Expr
  | EMul Expr
         MulOp
         Expr
  | EAdd Expr
         AddOp
         Expr
  | ERel Expr
         RelOp
         Expr
  | EAnd Expr
         Expr
  | EOr Expr
        Expr
  deriving (Eq, Ord, Show, Read)

data AddOp
  = Plus
  | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp
  = Times
  | Div
  | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp
  = LTH
  | LE
  | GTH
  | GE
  | EQU
  | NE
  deriving (Eq, Ord, Show, Read)