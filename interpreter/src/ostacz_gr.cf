token BVAL ({"true"}|{"false"});

-- Program --

entrypoints Program ;

Prog.   Program ::= [Decl] ;

FnDef.	   Decl1 ::= Type Ident "(" [Arg] ")" Block ;

VarDecl.    Decl2 ::= Type [Item] ";" ;

separator nonempty Decl "" ;

ArgByVal. 	   Arg ::= Type Ident;

ArgByVar.	   Arg2 ::= "&" Type Ident ;
separator  Arg "," ;

-- Statements --

BlockStmt.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

DeclStmt.      Stmt ::= Decl ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "~" Expr ";" ;

VRet.      Stmt ::= "~" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

Subsection. Stmt ::= "@_" Ident Block ;

SubsectionPaid. Stmt ::= "@_" Ident Expr Block ;

Repeat. Stmt ::= "repeat" ;

Finish. Stmt ::= "finish" ;

Earn. Stmt ::= "earn" Expr ;

RepeatXTimes. Stmt ::= "repeat" Expr "times" ;

SExp.      Stmt ::= Expr  ";" ;

Show.      Stmt ::= "show" Expr ;

-- Types --

TInt.       Type ::= "int" ;

TStr.       Type ::= "string" ;

TBool.      Type ::= "boolean" ;

TVoid.      Type ::= "void" ;

-- Expressions --

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitBool.  Expr6 ::= BVAL ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;


-- Operators --

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- Comments --

comment "//" ;
comment "/*" "*/" ;
